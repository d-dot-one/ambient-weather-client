# https://golangci-lint.run/usage/linters/#enabled-by-default
# https://gist.github.com/maratori/47a4d00457a92aa426dbd48a18776322
run:
  concurrency: 4
  timeout: 3m
  issues-exit-code: 2
  tests: false
#  build-tags:
#    - mytag
  skip-dirs-use-default: false
  modules-download-mode: readonly
  allow-parallel-runners: false
  go: '1.21'

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true
  uniq-by-line: true
  path-prefix: ""
  sort-results: true

linters:
  disable-all: true
  enable:
    - asasalint # checks for pass []any as any in variadic func(...any)
    - asciicheck # checks that your code does not contain non-ASCII identifiers
    - bidichk # checks for dangerous unicode character sequences
    - bodyclose # checks whether HTTP response body is closed successfully
    - cyclop # checks function and package cyclomatic complexity
    - decorder # checks declaration order and count of types, constants, variables and functions
    - dupl # tool for code clone detection
    - durationcheck # checks for two durations multiplied together
    - errcheck # checking for unchecked errors, these unchecked errors can be critical bugs in some cases
    - errname # checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint # finds code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - execinquery # checks query string in Query function which reads your Go src files and warning it finds
    - exhaustive # checks exhaustiveness of enum switch statements
    - exhaustruct # [highly recommend to enable] checks if all structure fields are initialized
    - exportloopref # checks for pointers to enclosing loop variables
    - forbidigo # forbids identifiers
    - funlen # tool for detection of long functions
    - gci # controls golang package import order and makes it always deterministic
    - ginkgolinter # [if you use ginkgo/gomega] enforces standards of using ginkgo and gomega
    - gocheckcompilerdirectives # validates go compiler directive comments (//go:)
    - gochecknoglobals # checks that no global variables exist
    - gochecknoinits # checks that no init functions are present in Go code
    - gocognit # computes and checks the cognitive complexity of functions
    - goconst # finds repeated strings that could be replaced by a constant
    - gocritic # provides diagnostics that check for bugs, performance and style issues
    - gocyclo # computes and checks the cyclomatic complexity of functions
    - godot # checks if comments end in a period
    - godox # detects FIXME, TODO and other comment keywords
    - goheader # checks is file header matches to pattern
    - goimports # in addition to fixing imports, goimports also formats your code in the same style as gofmt
    - gomnd # detects magic numbers
    - gomoddirectives # manages the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard # allow and block lists linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations
    - goprintffuncname # checks that printf-like functions are named with f at the end
    - gosec # inspects source code for security problems
    - gosimple # specializes in simplifying a code
    - govet # reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - ineffassign # detects when assignments to existing variables are not used
    - interfacebloat # checks the number of methods inside an interface
    - ireturn # accept interfaces, return concrete types
    - lll # reports long lines
    - loggercheck # checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    - makezero # finds slice declarations with non-zero initial length
    - mirror # reports wrong mirror patterns of bytes/strings usage
    - musttag # enforces field tags in (un)marshaled structs
    - nakedret # finds naked returns in functions greater than a specified function length
    - nestif # reports deeply nested if statements
    - nilerr # finds the code that returns nil even if it checks that the error is not nil
    - nilnil # checks that there is no simultaneous return of nil error and an invalid value
    - noctx # finds sending http request without context.Context
    - nolintlint # reports ill-formed or insufficient nolint directives
    - nonamedreturns # reports all named returns
    - nosprintfhostport # checks for misuse of Sprintf to construct a host with port in a URL
    - prealloc # [premature optimization, but can be used in some cases] finds slice declarations that could potentially be preallocated
    - predeclared # finds code that shadows one of Go's predeclared identifiers
    - promlinter # checks Prometheus metrics naming via promlint
    - reassign # checks that package variables are not reassigned
    - revive # fast, configurable, extensible, flexible, and beautiful linter for Go, drop-in replacement of golint
    - rowserrcheck # checks whether Err of rows is checked successfully
    - sqlclosecheck # checks that sql.Rows and sql.Stmt are closed
    - staticcheck # is a go vet on steroids, applying a ton of static analysis checks
    - stylecheck # is a replacement for golint
    - tagalign # checks that struct tags are well aligned
    - tenv # detects using os.Setenv instead of t.Setenv since Go1.17
    - testableexamples # checks if examples are testable (have an expected output)
    - testpackage # makes you use a separate _test package
    - tparallel # detects inappropriate usage of t.Parallel() method in your Go test codes
    - typecheck # like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert # removes unnecessary type conversions
    - unparam # reports unused function parameters
    - unused # checks for unused constants, variables, functions and types
    - usestdlibvars # detects the possibility to use variables/constants from the Go standard library
    - varnamelen # [great idea, but too many false positives] checks that the length of a variable's name matches its scope
    - wastedassign # finds wasted assignment statements
    - whitespace # detects leading and trailing whitespace
    - wrapcheck # checks that errors returned from external packages are wrapped
    - zerologlint # detects the wrong usage of zerolog that a user forgets to dispatch zerolog.Event#  # Enable presets.
  fast: true

linters-settings:
  depguard:
    rules:
      main:
        allow:
          - $gostd
          - github.com/go-resty/resty/v2
        deny:
          - pkg: "google.golang.org/protobuf"
            desc: "see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules"
          - pkg: "github.com/satori/go.uuid"
            desc: "satori's package is not maintained"
          - pkg: "github.com/gofrs/uuid"
            desc: "use github.com/google/uuid instead"
  cyclop:
    max-complexity: 20
    package-average: 15
  errcheck:
    check-type-assertions: true
  exhaustive:
    check:
      - switch
      - map
  funlen:
    lines: 100
    statements: 50
    ignore-comments: true
  gocognit:
    min-complexity: 20
  gocritic:
    settings:
      captLocal:
        paramsOnly: false
      underef:
        skipRecvDeref: false
  gomnd:
    ignored-functions:
      - os.Chmod
      - os.Mkdir.*
      - os.OpenFile
      - os.WriteFIle
  gomodguard:
    blocked:
      modules:
        - github.com/golang/protobuf:
            recommendations:
              - google.golang.org/protobuf
            reason: "see https://developers.google.com/protocol-buffers/docs/reference/go/faq#modules"
        - github.com/satori/go.uuid:
            recommendations:
              - github.com/google/uuid
            reason: "satori's package is not maintained"
        - github.com/gofrs/uuid:
            recommendations:
              - github.com/google/uuid
            reason: "gofrs' package is not go module"
  tagliatelle:
    case:
      use-field-name: true
  tenv:
    all: true
